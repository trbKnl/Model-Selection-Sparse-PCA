// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// grouplassoLossCpp
double grouplassoLossCpp(const arma::uvec& groups, const arma::vec& grouplasso, const arma::mat& W, const int& Q);
RcppExport SEXP _testPackage_grouplassoLossCpp(SEXP groupsSEXP, SEXP grouplassoSEXP, SEXP WSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type grouplasso(grouplassoSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const int& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(grouplassoLossCpp(groups, grouplasso, W, Q));
    return rcpp_result_gen;
END_RCPP
}
// grouplassoPenaltyCpp
void grouplassoPenaltyCpp(const arma::uvec& groups, const arma::mat& W, arma::mat& DG, const int& Q);
RcppExport SEXP _testPackage_grouplassoPenaltyCpp(SEXP groupsSEXP, SEXP WSEXP, SEXP DGSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type DG(DGSEXP);
    Rcpp::traits::input_parameter< const int& >::type Q(QSEXP);
    grouplassoPenaltyCpp(groups, W, DG, Q);
    return R_NilValue;
END_RCPP
}
// elitistLossCpp
double elitistLossCpp(const arma::uvec& groups, const arma::vec& elitistlasso, const arma::mat& W, const int& Q);
RcppExport SEXP _testPackage_elitistLossCpp(SEXP groupsSEXP, SEXP elitistlassoSEXP, SEXP WSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type elitistlasso(elitistlassoSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const int& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(elitistLossCpp(groups, elitistlasso, W, Q));
    return rcpp_result_gen;
END_RCPP
}
// elitistPenaltyCpp
void elitistPenaltyCpp(const arma::uvec& groups, const arma::mat& W, arma::mat& DE, const int& Q);
RcppExport SEXP _testPackage_elitistPenaltyCpp(SEXP groupsSEXP, SEXP WSEXP, SEXP DESEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type DE(DESEXP);
    Rcpp::traits::input_parameter< const int& >::type Q(QSEXP);
    elitistPenaltyCpp(groups, W, DE, Q);
    return R_NilValue;
END_RCPP
}
// lossFunctionCpp
long double lossFunctionCpp(const arma::mat& X, const arma::mat& W, const arma::mat& P, const arma::uvec& groups, const arma::vec& ridge, const arma::vec& lasso, const arma::vec& grouplasso, const arma::vec& elitistlasso, const double& Q);
RcppExport SEXP _testPackage_lossFunctionCpp(SEXP XSEXP, SEXP WSEXP, SEXP PSEXP, SEXP groupsSEXP, SEXP ridgeSEXP, SEXP lassoSEXP, SEXP grouplassoSEXP, SEXP elitistlassoSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ridge(ridgeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lasso(lassoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type grouplasso(grouplassoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type elitistlasso(elitistlassoSEXP);
    Rcpp::traits::input_parameter< const double& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(lossFunctionCpp(X, W, P, groups, ridge, lasso, grouplasso, elitistlasso, Q));
    return rcpp_result_gen;
END_RCPP
}
// coordinateDescentStepCpp
void coordinateDescentStepCpp(const arma::mat& XtXP, const arma::mat& XtX, arma::mat& W, const arma::mat& constraints, const int& Q, const int& J, const arma::mat& D);
RcppExport SEXP _testPackage_coordinateDescentStepCpp(SEXP XtXPSEXP, SEXP XtXSEXP, SEXP WSEXP, SEXP constraintsSEXP, SEXP QSEXP, SEXP JSEXP, SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type XtXP(XtXPSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XtX(XtXSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type constraints(constraintsSEXP);
    Rcpp::traits::input_parameter< const int& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    coordinateDescentStepCpp(XtXP, XtX, W, constraints, Q, J, D);
    return R_NilValue;
END_RCPP
}
// coordinateDescentCpp
void coordinateDescentCpp(const arma::mat& X, const arma::mat& XtX, const arma::mat& XtXP, const int& itrCoor, arma::mat& W, const arma::mat& constraints, const arma::mat& P, const arma::mat& D, const int& Q, const int& J, const bool& printLoss);
RcppExport SEXP _testPackage_coordinateDescentCpp(SEXP XSEXP, SEXP XtXSEXP, SEXP XtXPSEXP, SEXP itrCoorSEXP, SEXP WSEXP, SEXP constraintsSEXP, SEXP PSEXP, SEXP DSEXP, SEXP QSEXP, SEXP JSEXP, SEXP printLossSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XtX(XtXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XtXP(XtXPSEXP);
    Rcpp::traits::input_parameter< const int& >::type itrCoor(itrCoorSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type constraints(constraintsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const int& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< const bool& >::type printLoss(printLossSEXP);
    coordinateDescentCpp(X, XtX, XtXP, itrCoor, W, constraints, P, D, Q, J, printLoss);
    return R_NilValue;
END_RCPP
}
// makeConstraints
std::vector<arma::uvec> makeConstraints(const arma::mat& constraints, const int& Q);
RcppExport SEXP _testPackage_makeConstraints(SEXP constraintsSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type constraints(constraintsSEXP);
    Rcpp::traits::input_parameter< const int& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(makeConstraints(constraints, Q));
    return rcpp_result_gen;
END_RCPP
}
// newAlgoCpp
Rcpp::List newAlgoCpp(const arma::mat& X, const arma::vec& ridge, const arma::vec& lasso, const arma::mat& constraints, const arma::vec& grouplasso, const arma::vec& elitistlasso, arma::uvec& groups, const int& Q, const int& itr, arma::mat Wstart, int nStarts, bool printLoss, bool coorDec);
RcppExport SEXP _testPackage_newAlgoCpp(SEXP XSEXP, SEXP ridgeSEXP, SEXP lassoSEXP, SEXP constraintsSEXP, SEXP grouplassoSEXP, SEXP elitistlassoSEXP, SEXP groupsSEXP, SEXP QSEXP, SEXP itrSEXP, SEXP WstartSEXP, SEXP nStartsSEXP, SEXP printLossSEXP, SEXP coorDecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ridge(ridgeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lasso(lassoSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type constraints(constraintsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type grouplasso(grouplassoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type elitistlasso(elitistlassoSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const int& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const int& >::type itr(itrSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Wstart(WstartSEXP);
    Rcpp::traits::input_parameter< int >::type nStarts(nStartsSEXP);
    Rcpp::traits::input_parameter< bool >::type printLoss(printLossSEXP);
    Rcpp::traits::input_parameter< bool >::type coorDec(coorDecSEXP);
    rcpp_result_gen = Rcpp::wrap(newAlgoCpp(X, ridge, lasso, constraints, grouplasso, elitistlasso, groups, Q, itr, Wstart, nStarts, printLoss, coorDec));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _testPackage_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _testPackage_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _testPackage_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _testPackage_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_testPackage_grouplassoLossCpp", (DL_FUNC) &_testPackage_grouplassoLossCpp, 4},
    {"_testPackage_grouplassoPenaltyCpp", (DL_FUNC) &_testPackage_grouplassoPenaltyCpp, 4},
    {"_testPackage_elitistLossCpp", (DL_FUNC) &_testPackage_elitistLossCpp, 4},
    {"_testPackage_elitistPenaltyCpp", (DL_FUNC) &_testPackage_elitistPenaltyCpp, 4},
    {"_testPackage_lossFunctionCpp", (DL_FUNC) &_testPackage_lossFunctionCpp, 9},
    {"_testPackage_coordinateDescentStepCpp", (DL_FUNC) &_testPackage_coordinateDescentStepCpp, 7},
    {"_testPackage_coordinateDescentCpp", (DL_FUNC) &_testPackage_coordinateDescentCpp, 11},
    {"_testPackage_makeConstraints", (DL_FUNC) &_testPackage_makeConstraints, 2},
    {"_testPackage_newAlgoCpp", (DL_FUNC) &_testPackage_newAlgoCpp, 13},
    {"_testPackage_rcpparma_hello_world", (DL_FUNC) &_testPackage_rcpparma_hello_world, 0},
    {"_testPackage_rcpparma_outerproduct", (DL_FUNC) &_testPackage_rcpparma_outerproduct, 1},
    {"_testPackage_rcpparma_innerproduct", (DL_FUNC) &_testPackage_rcpparma_innerproduct, 1},
    {"_testPackage_rcpparma_bothproducts", (DL_FUNC) &_testPackage_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_testPackage(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
